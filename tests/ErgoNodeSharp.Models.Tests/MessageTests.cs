using System.ComponentModel;
using System.IO;
using System.Net;
using System.Text;
using ErgoNodeSharp.Common;
using ErgoNodeSharp.Common.Extensions;
using ErgoNodeSharp.Models.Messages;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace ErgoNodeSharp.Models.Tests
{
    [TestClass]
    public class MessageTests
    {
        [TestMethod]
        public void CanDecodeMessage()
        {
            string message =
                "020000024100007d022d6941fce80796e4d8cf2ac661ff0af6532d1aa7511ec78e4ad86a79570e205115bf136eb55d59a49632c09bb1566217b1036f0841171b3a02d9e61a62fd62abb0ba55c57ee56cccc2d1a4f85992e13d90289151c7db61dd1872e235ff183c6a71c8b791587444f4da0790b233cc58528843b0433b8ae0366a8ae2edafd02f625f0ca82ac8fa958c31d65e40945c2619dd79e400a49b37efdf5924e86a678aafb99b7506d3a05554210563125b2daf283066af38133b037f62d3c1a5605f06df857f5d2a28cf49f2d4442827468c0600c8ba041a3c19722d3532ed2873da6222d691de0a43c40b25fa18e89ea75636ac527e4a28435e9cef89b2f7d33900540dac59a2099e1d4bb8d16d8c63c68db1ae752aab1864559401ac57d0035e45b46c7d60e8bdd7e33e58016dbd53f699c7d07a06a4133e1e9af9e354769f1bb44dd9937460cb632565a52ab714fe7db4bc92f30ed4a8911ecebc2109c846089c23936316029f14a85129c52226b5c57cddb67c180bbc5f155c6f88f86c0ef1f2e3ed3fb7647a8a254297ab1787cbc7d180a056e009812dbab778bcb3a9d77ed0f61f9c4318e87cdb999ba03b539288da29d5591f79c22acbdcfb6c5688d3ce9925b5bf00eb033acd616d00219d30dd643553af158264c0a169f5316105668bb416dea15c7990dc9b7dfaec60661a4dfacf9f2dd1c1732e39216519f3ee8764b6ff2805b72b6868eb05c971d0031a4a3ef3cbffb97db797cf9749d777c9e25a5266e80bacc3bd3f13f83d1cf822e47cb3affe2946d7df03b55578f29aabf422eb478309803df1cc0ff16bcd53da208449a8bfb56ba9d7a78cade55736576ab9a3774d3f197e9d0e00f7bead5223c440380dbfc0adfbd316c5ab332c0e3a0632f9fbe6db3bef780b608979ab9952a01c4d15b1c965e78d17a407036884a39d15a0733060d1c6a7b1ccb5057219df68f5cfb9d6574e9e1a11540ed4ef9d3e1ef99a56420865c56dd985d2e9aeef16824e6f8c59dd2ca5e7921a0ac5e470c5f77f8b1b56f0a75252b29f9ea459ab34b5ff5ce7fcb1f089ed0fb433493ab25b2442fc59362f3a3e272f9cbbf942c9d7878e478406d1145cd560bbe9b584211a1afb7c36821b1e0272471800982a8f7d22e1fde933f3c3420e3c250a6d9b5c3536eeedc9b935f50ee4d986e97d25ba93575bdd9235a9114486a170a3da3b8fcf480d9674b347d2d4bd63bbcbd6ae75a4a4b4a040a4821e39e6b04c69076776a08dde955e593ccdf20add67f0ff91417e3d136faea4cc98e6d6a9c3c9498010dec30c8319416f13b8c06633dae4807ab9cd56a87a77e41a2701000aa264ac6ffe6507f84b776f09ba95b7a81cecba1c9a1f745d8695a3d95b2f4a68a93ec7db86e4294e8c15be278374cd1365c99a94967a0a1e377de593eaa7a6428cc9d7fd1ebf6354318b80dce25de9c15c89d8a6d8c852eb65b4e631fc5f2526729f43f5b8bc07a0688ea0bd717a261a94d2bbad0361f492e04e53ae5abc5d72ecf943846598aba9963eb9f9793b98d9ec7eedea6ad3d1d867acc2c5cc63a9f3ed75dfa815bee5f4c3af019449627040ccafc110f60879eea03c9669b5ec222a8b0e26e735f95b1c180104653cefa67c1283a552d839c0bff5d73a5fdf1fda8b9a56cf4d641aed74eccbe5ffc860f6c5ba5d24022da43668389d693223a0b542eaef3dd83f528c61e428229bae6eeccd87bf288c712ba3a6c60d3ae36018a0cf5b26370c0c3c676cf466b94ba8776ebd75c188507c3cb978e269093dbb8c2d59ad77d60136240a73a12777d8a7a71a2a323dea97be3f00aaf97804a1ccd1eb75700aace0fae868048f19b72435ef0a5697654720455eeb5e0fb5cc1acd10bc5bbc0e4c3aaf31e5debfcf47412a621b4d955b31e9daef9aaa10e965dc99013de63b9f2db7259df650518c3e1b8da96e903a34b097c32d98fac95812fd02f1ed394a9581e081de10c861d273f7baf555f40dade797470fb8ca9a630154f0c19d3f483fee65773aa59cabf3e4ad97cfb33372a0d5d205";

            byte[] bytes = message.FromHexString();
            INodeMessage nodeMessage = NodeMessage.Deserialize(bytes);
            Assert.IsNotNull(nodeMessage);
            byte messageType = 65;
            Assert.AreEqual(messageType, (byte)nodeMessage.MessageType);
        }

        [TestMethod]
        public void CanDecodeSyncMessage()
        {
            string message =
                "0100020441000000214f904163010101010101010101010101010101010102020202020202020202020202020202";
            byte[] bytes = message.FromHexString();
            INodeMessage nodeMessage = NodeMessage.Deserialize(bytes);
            Assert.IsNotNull(nodeMessage);
            byte messageType = 65;
            Assert.AreEqual(messageType, (byte) nodeMessage.MessageType);
        }

        [TestMethod]
        public void CanDecodeGetPeersMessage()
        {
            string message =
                "020000020100000000";
            byte[] bytes = message.FromHexString();

            INodeMessage nodeMessage = NodeMessage.Deserialize(bytes);
            Assert.IsNotNull(nodeMessage);
            Assert.AreEqual((byte) 1, (byte)nodeMessage.MessageType);
        }

        [TestMethod]
        public void CanEncodeGetPeersMessage()
        {
            GetPeersMessage getPeersMessage = new GetPeersMessage();
            getPeersMessage.SetNetworkType(NetworkType.Testnet);
            byte[] bytes = getPeersMessage.Serialize();
            string result = bytes.ToHexString();

            string message =
                "020000020100000000";
            
            Assert.AreEqual(message, result);
            
        }

        [TestMethod]
        public void CanDecodePeersMessage()
        {
            string message =
                "0200000202000001aff933a5ae07076572676f72656604000a136572676f2d746573746e65742d342e302e313001089b5ed292bc4602100400010001030e02000002c482e6be8ddfc8d9f801076572676f72656604000a136572676f2d746573746e65742d342e302e31320108a87764dfbc4602100400010001030d02000002eaaeddb1b694bbe933076572676f72656604000a136572676f2d746573746e65742d342e302e3130010868d9fb46bc4602100400010001030e02000002d4dfa88586f2b5fee201076572676f72656604000a136572676f2d746573746e65742d342e302e31330108d5efc1d0bc4602100400010001030e02000002f585b8ca93cdacebfa01076572676f72656604000a136572676f2d746573746e65742d342e302e313101089f59740fbc4602100400010001030d02000002acf5dacbde869fe338076572676f72656604000a136572676f2d746573746e65742d342e302e31330108904cdd64bc4602100400010001030e02000002ebd9ade79ca1e8d4fb01076572676f72656604000f126572676f2d746573746e65742d342e302e300108c3c95273bc4602100400010001030d02000002e6eed2c991c3e29a77";
            byte[] bytes = message.FromHexString();
            PeersMessage? nodeMessage;
            nodeMessage = NodeMessage.Deserialize(bytes) as PeersMessage;
            //Assert.IsNotNull(nodeMessage);
            //Assert.AreEqual((byte)2, (byte)nodeMessage.MessageType);

            message =
                "0200000202000001ae1093b95307076572676f72656604000a136572676f2d746573746e65742d342e302e313001089b5ed292bc4602100400010001030e02000002c482e6be8ddfc8d9f801076572676f72656604000a136572676f2d746573746e65742d342e302e31320108a87764dfbc4602100400010001030d02000002eaaeddb1b694bbe933076572676f72656604000a136572676f2d746573746e65742d342e302e3130010868d9fb46bc4602100400010001030e02000002d4dfa88586f2b5fee201076572676f726566040010136572676f2d746573746e65742d342e302e31360108d5986a38bc4602100400010001030d020000028cb39ec8e5b6a18a24076572676f72656604000f126572676f2d746573746e65742d342e302e300108c3c95273bc4602100400010001030d02000002e6eed2c991c3e29a77076572676f72656604000a136572676f2d746573746e65742d342e302e31330108904cdd64bc4602100400010001030e02000002ebd9ade79ca1e8d4fb01076572676f72656604000a136572676f2d746573746e65742d342e302e313101089f59740fbc4602100400010001030d02000002acf5dacbde869fe338";
            bytes = message.FromHexString();
            nodeMessage = NodeMessage.Deserialize(bytes) as PeersMessage;
            //Assert.IsNotNull(nodeMessage);

            message =
                "0200000202000001333939372505076572676f72656604000a136572676f2d746573746e65742d342e302e31330108d5efc1d0bc4602100400010001030e02000002c082f189d991cdc0e201076572676f72656604000f126572676f2d746573746e65742d342e302e300108c3c95273bc4602100400010001030d02000002e6eed2c991c3e29a77076572676f72656604000a136572676f2d746573746e65742d342e302e31320108a87764dfbc4602100400010001030d02000002eaaeddb1b694bbe933076572676f726566040010136572676f2d746573746e65742d342e302e31360108d5986a38bc4602100400010001030d020000028cb39ec8e5b6a18a24076572676f72656604000a136572676f2d746573746e65742d342e302e31330108904cdd64bc4602100400010001030e02000002ebd9ade79ca1e8d4fb01";
            bytes = message.FromHexString();
            string byteString = string.Join(',', bytes);

            byte[] header = new byte[] { 2, 0, 0, 2, 2, 0, 0, 1, 51, 57, 57, 55, 37 };
            string headerStr = header.ToHexString();
            message = headerStr +
                      "a4b09284b85f0100076572676f72656604000a136572676f2d746573746e65742d342e302e31330108d5efc1d0bc4602100400010001030e02000002c082f189d991cdc0e201";
            bytes = message.FromHexString();

            nodeMessage = NodeMessage.Deserialize(bytes) as PeersMessage;
            Assert.IsNotNull(nodeMessage);
        }

        [TestMethod]
        public void CanDecodeReceivedPeersMessage()
        {
            string message =
                "";
            byte[] bytes = message.FromHexString();
            PeersMessage? nodeMessage = NodeMessage.Deserialize(bytes) as PeersMessage;
            Assert.IsNotNull(nodeMessage);
        }

        [TestMethod]
        public void CanDecodeReceivedSyncMessage()
        {
            string message =
                "020000024100007d02135ec7e4e807631d88e97cb68ce6deea535ebdc0804214359235bbdbce72a693e584a9a0f249979651266058e0a885c3b620615e2071c988265f758506f7a1470099b7e65ef80ad33a60cff68986a7037c12c3996e51093aee3771b3cc4d1e4621678155cf3e0f5c89a03379c340021b0acec97b9b58dfaa536f1e10684b0e2ce28d62fb941d568d46b1d7b9edb6fb7b739272b251c12e95f4c11dc43a18dca5ea64c6309fc8b9a7198a261e04d762b54e2bac9bc3bd1c53f223ba2e9071f8c498f77dbcb8a32f185db52149be15fef246561b89b0e9a30134e7147f16f1f0880b217a104ba8379bef9d08fd60c3c0972b02f5c79e07aebdd86f3e04a0053570d1689d03fbe055bbc3aaf6a9a89ac6de201450c4c3296fdfdf514692bb65c2b0ff1980245151d1590fac05b6501e849ab5be7f6af80a47141a7cfcfb040b60baaa3513cb7be2a32d0166a17602b91714c9fbf4ce383652ba3c1327218e6b3c3b317f1527de2e0a4424ab3169a682d5722bbe0cafc213e6c02fc3a9f63bb9eb5928ad3bd24669512d5ea870bf61804d9b382b5ef5abcb86cab949ad745441ca3e8148daafa181b5c38950ac115f4741ef06bf150deb2b1703546ccda0a197be107b6670e130065f8e3cf708bc093c8f037cbf59ce0cb750628e00a6c8ba9dae0b586dc48682d54a6936b67252d8065943c23bbff8efa3e2892362ede73f03abb85f8b650042c3709ede807bc6a380ba0b3a70470b7c8edc3c90e2877ca7ceb22d2be664b37cab572ced6f88988b178d59659cfb8f173e9141adec5d37ce036d6344af09e27f83e9508ff682cc7a55cad2d2581fcb9bfba93d15ab90852fad9e113642e26d2639641470de386f2f15a8b9473027a0cc7e0447f5401a383554d126b914c1ce46ce707a3142e0cd86b2dff33d4e3e7f8d81165fe9919dd4cc9e9feb653f1e31e090b8d66e5e55210123985356dd94ff466d516f989eccfc167a1e89afbe29da65384e6771c53bfecf334405e1c4e5fce71203054486b170af1f56f338c69432b3769bd66e925dc99dd1189db152a7205591bde0140a0817826ea29d37c55bad9cc7ba6564065e45a7e45a496aec9a3dadbe39000d0610079a4c915916e232e379806302744b21964dd3ba97c257534d411cb6fc1740e7fb3719f82c9a19f1841f08fae54eb2bcb2107f33e9e2cd2321a742ed4417f826708202e4a8799f6eccfd849cf4fdbe6ce40dc3649f8d583a3327785d59913272e5d80b5bf4b0370a08624bd3490d36b8250373c3e2c99a69a8f75cae4226e6cc1bada83a73ab3934dbc26a964ec1ad44f8d8474e08d4d7cc78887ec9e1b7c8a41baadb34fc3e2d002f5464da9b0f20642674995bef05a25f1f234df5dc2b60490c199d381adc5f1b48aca01d036b97e2fadfc0a5e3ae048e459e67a10c52dd187b8b378e19753e9f8f9b21a21dbf1f6ac73b0ffa551db9db1e91b496e5d6f4779ee3a45982f9b89ebc0a1d72d943f95653680e079b6b91b2b35fe29076c01376e466e3ca2f075fa2609b2da9d91cff8c08095c1d8f2006b68cde6cba2f173418538a9b228a7db92a41d536096034bfbb14bd8c7eea03fa73351647a61b30e2fe58b63582fb8d93a1f5f6716c564bafc58544050e3bdfc48aea1a27c7db3b05775aa90faa07a41769bc32dfc3d0bf865d81fe445aef245506945ef2f96ca5630ff763f2c936662cc209dd60ed52aecb6dd88f93e249638bbc1fd7b929b4801e4495a355de582a2d415ae7838c0e6850b6389e12743c2960120c757f07623f29113a79f27a0d79f3549eb1eee50c4ab9401f75daf147e6120d46a0ca1de066e193d3f923134eda0ae5ad3c736bc9a5a6b5ee4bbd74d09c1e9d9e9c829b246f3221cf3b95913dce2a257744c79ba35b3f61e8b4ce4144c6691f8bdd822a27dc50f75ba7f4c443917f698ea88c18b9fe8f1ba7b4ee8a41a18d1a701d8dfd6c81a7faf61e2e95627a12af5893db3d2be90620ff9945d04b0050d75667fa2d73377955684b37c5943f1f55fed7fe88d62c86d047ae5c559336b98aa022fccece90f8e3c1164ca45cf819c37bf76fed9d5d4930aee2dec138b391fa2082c80d18e1336d3b484ee360279420a542ffee63adf6cf6f49d977d935b11b7064263aad15df27a39e46134c5b9acb471884d7c497ac80fc1248a2994b3d5b6e558ed7f62712b6ac7d8b39365ebbddfce699ef11eb88170c79910f0525f122c579abf83f5baa67157ad596739a146b21d04a4ec041ebcf6422d34b2fbe4368e89976e901b290293cf459c3240b0c2e524e83415d48785f599ac22529f091dbc6ebb2c042f0937f05c01fe5a129be197f61e31de8ca43862a4f9bb3805ba93f9b715c76cbaa6f5c4ad751c7c68305137f9fa77e9565caf1c8a82c3e195bd98ae46d93756b9b9c0106cfb82dbbce3478aece480ece9232a65377434ad0678ce4a00c9110550d56f72d4e27bcd10de9e37eac457ba41fcd482ce22e4077b9c434266055e9f8c3c44e5dbce45c677d5b56dc1eadd000088ada8206359a9f9f258795781eb2a083d0018ed72e237bf8b573554331e99e947ed8d31f2fd808ef0f33c81eedc51707a2a8746878424031886cae1bea874c58186b8b6f60163f0bb11627ff7571148f60ecd56ac88e7949d78fd7b0b3f07bf2bde9926c8c685a92cd10565f65c5166199bc42d3719a628b10f16cab34fdbe92eba5d806a62ec102182588851c6ea7456e1d0108e9674d4ced22aef8dd8f547406b01e4c0be9ee4d755c14bb8cfde7855b00ff20eb30c2413893653e992d58a7012155377b5f3e5f07dfdde7f0efb3aa1181e3954dda8c08ea1c3e7a8659cd28cfc76c52eb1813a7620cbfc3022f35473ceda65a68a224f93b0db5b9284852cf807cf6a3dc28eda138379764d7bc8b368ebf4a26d67eb6e28be9458b8d3805a0ababdacc141f34b353e7a3dbbb83607e4fd3031a1cd81a91225f1add35a16e08e7fab2d3dd5c5c980679c0d0ef74233c427a73b823eb064ca77bfe30e97abc9ec2b639245005cc3648c2b1aeca728642e0deab90412c47bb1a3e9fef0c2912d161c5c1c23533aa7ef10a325401b1473f2c0b35f7326aeab0767dabe971f9e7e340578777fc58eafa050df0bf1fbf4b0b4f280993d3e9b6a2b363199cb32df9b40d75c33924883662806bc66f8735781c88b50c76c9fc21e95554a83061586ffaa8b0e4ddaf21cb6f4150b11eadd6f63448ba7237df24f7bd67eed8b00c8bb43f9ed9985de50fe8938865cc89ea27008717ed27d0dcb2dc2e28e4e0203a27da830c8514b4761a7fafe599e05944b62def6219cd068415fb83cb16e69651d4faabc533853ccc62595c2439414bbfe43dd89c3fc692f5a0240940ea502ba27bcca8995f6f465d05ec601f30ec52c1b488d037f9aef64a86728b9f5cb555e6d23584355b899de287032b1fe4690c40ba8392e3d03c673eeec3e54f96bd68623fb35866f28cbaa90c999fbfea5bfdd7b71ccad5f01b352e765dcb16724d164e99ad0c26789ec18a630705ed017c98fbddfa46c1e5355d951cc037756f33b5dc642c378463ea147d33febefb929f2fa6359cb6c24d99fcaadd5ee6f3c53edf26b81ca7c03a07950332cfb0d8c4345a2fb7a3dbe7c6a2b1233796af86de8c4492bf1c401f253d933f21f69e1d7f0cadfc30c405383bfb7f212e2309e86ef854de540f934706339520abb578421345786477f708fb576046cb905639328aa5c6be5a46a91c5c44b10e2fe7ea52caaed6500b67d82390bf4760f89a130d479e08d8fd7d627ae6c12a86aa6a10c6bf765f5ea28b128d33dd084f5f6901c086aee803fea877f211c839fcc024465e90e77db98c8dac4bfb5f018747f7015f116c99b0fd6558401c837dae7bcdc77bcb25428723909ddef6427ca57c218490017996c24f36475d783ad5074b539724be632d2b18906afbdb00970631fa6b6cf51ab9aa04a792d2751074053b6ef29ba6f45c66e4bfb496c908665c38429bc65cbb8c029a03dc42f28beba06832d869c811089213f9a0376cd6bb97b59c7793f8e77219cc5c6ec820194468c51f02eded337062aadf81fb358f9b30e79aaf3a95919142e70e4ea4f04897c1eaf8277f18ff40e61e74ccf50ef0a3bc3adb2f5af59c97c209fca3eccc67f6439505946e0ce55e68b9a89470ade039b348ca9a3ea5deb7b1453188f4d9ae119f09fc8587db56328388685a99553f7fd1504ad8a7abf998272a4f884cf483540837a10dce29ad648cec8b4f61cb160cc49fd12d27e860b0ad7054957ccf41007571546d2bb8d9797c32757800366627d3ab2dfe5a573b01700c3944dce6c95cdf0bb6172137ea563ff888308d1a96f8c7ce72aa04df19f9bde13e4a270aee788b8d6e52143ff101b5381e3c8f383573c93fcfd9f0dc667e1fa0f76ef0dba526c70e989ad5ad67bb5f3e278c7b558ad09b0683bf92024563e5de95f54b3de2125dc8b6dc0103ba0e15b088605503bc21cda9bcca0f4e7b6f83473b995037dc615b597e49fc39aa6d36761ed833941a1e579438605a9131ecf252fcd47977f76e9076154cc60b23df19d631853dc74127066346b12e1a5a70a8b6aeca9dcd8bff8e62d7190e2c115989105de18f0ae7758a421dcfab2575b838b99a93f2df03f9c7974f894f18fb3b89d871162f8b58f2665cba316986a30368a73606338941af5d9b1cab0d7efebcc11ebeba2150ae868613b04d156ae715a6165a5795ce2193c6ee26a6e941f93ed2bee15a00593edc05858a424aa3deca77e889777e01cc3a455c367d5f817927b69dfe8795f5cb968a7a2dd290dc4b15961d83f08d99a2edd29b6b21f2451650a4b238a0778373c7bbe35a247fd90da9d96e9df50be2d5df74073cfec718191c45dd98095e3373a60935d3158625d62b3e6d296ec85df427a17903d1456d90d68ad0b87c1760ac18bc2e0fdec638be5917e318dc8302bdfa07eff599146643dad8999b3c4c3f760f63ff0687e5f49b6a283345e961cc0a88ef0c77e47117d2a16b1311013916309443f9f52717e5a8307d598b7bebc5d8cb919fa08131e91f85ecb1443aacba0a70dd3e69af16307312f09a46ebff5fe87d6fa8e7b24bf9ab77f986cdc083fa9b31dd44455b4a523a384fedfb66853b3cab9a3514c273c94431e07c9fa3619f3817eeae8af3e7f528efb3fefd74f99e86cc71ce51febee92f03f375610e0bc39e2c383dee25cea9b01499374af714c1d6ec2e1d7261add1ad6884756fde636507c8f92112fbf60a069dc762f20c48f0864041b22eda5005f0815667214377e96bc1016486d8375ce3227fe6fe56544c422a3bad1ee82004f7c1f21030e53ecd2da86ffd4b569dbdf0f838272d7837433edd6c2db51f327ce9abb8b4563f477f4321024f55a8863646b32dcfca81526b9a836064e98f67ddba680220f8e121c46e28c28028c98992fbb06084b327cf8348291bc7952fa6fd8116d21a67fb95992ca0f7317a6e3ba13d76ebe07ef25a5fc626079269230bc1369f0165f8b40461d3058aa91cf18e13224d712c4e23649694acfc534a9203967c17792b0e1bb8d708b1090926f3a55f8869187c4289cd278ee462211de43b73d99be1b59536b3984c82e7704d845a0d3a8e87ca4d614373ec3ff47f535784e211dc70f2c56c1cf82e96741eb5d61a583c462be0c9d3de29457bd952d8f7dd197b3e232ba27e279ceff685b1ff1c721c52a89270afa00905ca7a25d5eccc4fda6c10680d1e01f87896f7cb52170652e6082802365405f629bbe1ffc32c0efe409b41ce4bf3d15e961065d06bcd8e9d72f10e1e465c2845cd4abbf0270f2032ddd07b913c10a21ed6fdfbcac2e977b33efec1f5835499d122ed3ff1887aa896836abf5c2de9c9f3cd15e3bd00a78d9602118eef4965ac1b198b157a9c5b8be43c385efdb9ef2f15fde521caafd349f1c768fbc21e80999d884cf5abf8ea0a5b839dd90cbf232a42b7a0ce5032a7b47cd1b5f5a7a669ae136457b077a151780ed9d93649052bbe2cb828440a415796a9c733ac6c617c4724b95c38e676a9cf84584bab2d9ef15be1bc2d6bb37e7998a9ff725e24220e3883c1a6ee35dae7abb2275dbe8dd3b91ccd5bdaa315e593e8989aa8e69f37a3d361d23383e1d661af94401aee3d8114271e50fa029ef194f52de37091c4286b5ffcdd94cf114e16270639e6a3559f94c40761771b3c911b259bac34a310917e5ff0fe180b4615a08e5391bef6684647e483cd389ec0593ab96256f88096781d96b0ddf949d233233cf9d11999c1e23f0df0bb6c28bc8bafb9b2fc7b80429206447140fe79782540ee4f0519b29ff4439269e8932c04b6329b787e99d973384953a214ecbf9de4fdf7c147ff02af98036a4145461222352edaa4e90db02ef5d897f16b97395f5b98f19edf0a62df96551daedf8744ff0746aef5f690467a912f862b5aa5aa9ba4eaecb44c154e75dff812eae4c6e5d1f3f8a17a7c1cd5bb0f78e3f004a996c50a485da42843e1b86ac4b53d3af5ee561560d9deda11da460cba5c6398b20d41e84cd00d8366f098338925c27211f2233914feac7e1c37973e7cc14466355d6c0abbfeba6988f270b5c4276e0eab3a9924a5537f0eda9706efee5022404ddc974632dc75b6638000a625499bc19e9d585f650a4b66b70aaf45f4293648c6297642d6bd0f6a525923ab82a95ec8b3827f9d604723e61e8e5e9457ed879e54c0c494f26c45426b2e10dbe08f1ab5ead3f1dd1d382a9a17fdabca4e8d5038fe2c8b3d5994c91a53a2dc5148aeb285bd1a514439b2488e098e3c7c4b03aaa4b733f11ff9c0bba54bf6be096231fa652dbade460311f7600715abfa5859d3b282b03ad071a599dec7980d8c161afa44a90f2ce87cf788a49fe4f6ad36e72d0e1aaeb1b76dcd83adabfc0394705fc77a4627c019bb5a08a55b0f0261d0157346e7858fbe782e609016b1a5817553278d9f8737653531ab4da635b9bbee8d5d08cab2dfb1553a2c54a10d577482bf33aea38635bc827e888a0b7f365f91538a13a591ecd6b469fc1a60df4c85a432d7fc9667cc4369acd56395fdff738e94641430b3f20baa747d19f5bb344ef65b314a08be2f258e79eee410b57269ea45a44f296402afaab326f9859981e44661d09a2026dd8557a2254a6ebb87cc2b89e7dc8ec493a57692872c371d19a939f5e1562fdd4a1e3c15f172d756d7ebb040beb9af0047f8d73706d92017b684f00db124242ea9b55b33da1472608c087dbed17c81168a2e31f20414089a3e939b832c20deb6c982b1c31be2fd47ba8ba73ae9d73a9c5835491003f9357a1ff6bf537ec6f92d1a55e085e7d74ac916822a7d7b3f1eb5bf81e69f23ba6254af60a3a1f2f44e39721bd8ee48112160199f3fd7c62aace5886f54d253284f205f922f9cae92269ee9c155f229700fb49cbd4767f0636d14e8afff4897c3a3f31f1c568a79e1cf4e019b8034f39827575b5279247c5ba3f475e068f50ba08772a8268ce4816d9f2380fee996866720f4d9312082aecf2d752b03fa28df76fefede64e197a5df507ff052caa666dccffbfe09d780c380ae262f7ad564d1a8c074b1996f7198d9401694cacb98ec6d2010884062a47db463a86837560347893f6bcb8fea4354f0da968480797171ff538f190dd711515f75964fd794976eef47dd6866a8d7a68f343ce50a1f361f8449693b13a0d14ef6e67cadc6bbc9e4c1841120a5ea47dcc39cd3cc94c9404a0e1d835cfce0bff03369125fd35d1d1f07883c219b9336dc90056a78cb3d2d22c0688a19aeec6c755928af1f14a7c1a9a8624aa6291b8442aa8fb51c31022c20a2a89cc2804b7cbd54169399fae5126994ac667b0d35be137875f37542ae41be4999db26446647b2ef75bbcfcf4f15dd56e18a0643f5dc2efab6ef02f2f2c218c0b0a0543f637f7ded3e83df9f3248010768649a1ea54acc5dc4d60a2d28f857e77ca87e02f549e5a811637c7a03dcdd0aa9a58a571f";
            byte[] bytes = message.FromHexString();
            SyncMessage? nodeMessage = NodeMessage.Deserialize(bytes) as SyncMessage;
            Assert.IsNotNull(nodeMessage);
        }

        [TestMethod]
        public void CanCalcAddresses()
        {
            byte[] addressBytes = new byte[4] { 239, 193, 208, 188 };
            byte[] portBytes = new byte[2] { 70, 2 };

            IPAddress address = new IPAddress(addressBytes);
            int port = portBytes.Read7BitEncodedAsInt();
        }

        [TestMethod]
        public void CanParsePeerSpecBody()
        {
            string s =
                "0000076572676f72656604000a136572676f2d746573746e65742d342e302e3130";
            byte[] bytes = s.FromHexString();

            s = "01089b5ed292bc46";
            bytes = s.FromHexString();

        }

        [TestMethod]
        public void CanDecodeInvMessage()
        {
            string message =
                "020000023700000702a595b4ef65389489f5af5a6c3511d8d6acc29e054fc7881f6ad0e66ad5307c5b144d8d1297c891a49caba1e4003808d6fcb36f927742b7d72ef6c11baa85a0d61b2043ffcffa9a749bfc83401427102bbe60b19a56b4774c60d674f1d4432e5921f33f46f1143084c25ff4daf50b0f84ebd051c0d12b9bfe216c73db8c075e335fddd1ba078d808238509b8a6168ef1f85c166984f36656ee9b87214bc3984da30cb677ee209b20903ec611a0de4bd694bc0f732393ffb7e9d795ea56364fb9ccfe2cbf1b1c621637d730738c834b614394d1e31df8f6ed47f21b695a747b84cf96b6ed011be9795bfac8d1ac0c036e5d35b54c3c26407fb82e04c173ecf644bd0065a4a862fa3ff752d4317bfd381e94cd8530c90c5e8a7d4b865dad6fb23e2621db3e4ba9706e0e761a90eb9d209ec0a5ae00e625f0cfea21210e56aea8bed32d7d4bfb26a7253fbf984c20dceca22ceb43e4d6c33e098e3c3530c8dba63692648b0865b103c2ed6af8d8719f4fc663bebe5c396fe90810b14df1a07df71e85a7cb2d87ca0965ba3c54e6b94ceedad56b05a94529a00a35c0e3d7d832dda6e498a1e98c47a273b884d78bfcbceb3ac3736056765ddf4dbcfbb8d21f100e4d2de02de62e21d8582a43a85c8738e112b3494b993f25319d3b541cf42d6eba73e8855e78c34005e962e299d0b0ba8b3abce15c193ab585e4ba167051473c6f0c7b555f0f1433ece46e5675b3365d7193f955f06462d8b558f338bbcb514646136d337e1380ecb5a62d86244f684ce82acee54b0e82264e9f990635cb16fb6a118fe813da74b29984288e64cb41d6f4278010a83053aa73f96e42115429e6fa9ff4fc23419b1d498d5f343b4918508df8e45720b0a9370bde94e4ccaff163149404c8508d63364c7ad6f9462ec22bd463d58c9cd982b63ebce8dcaf8b7441fd1b45c509d481a85385936eba1b52195449688fad3d7ac2891e46af0fe55dabed09d517d3c9fd3b85c3910f17b4ea875fa5f97aea68ac52a9e5037f605e39723bf61b4170528a942c12914b95ac7f88deaeb351f41d25463085a5e90df9e5d245a8bf050269b364f97b6187530f18e3c572492434891039df43945d397d8820d74e209980a4e65f2c790b09b406a4b95abfdc6a8b4d29a0b96c0686fbd9cd5ca6c11d1c0f2ec74f54fd965e7865ab538544dabcf5370a050ebbfc189732c38747ad9b3456eedd4f58ae757ebb634ee7eca0005cb44e706b7514d3c77041815df1447c5cfcc8771acf167e0dff5b10cc3513ab0b331275ea190e63e1b06047f2f00f90a16c628dda85027705b839c193a665909dd7b006a519420d65d7d950345adf376442d61a50f67a59fe691225b9cb13d71f0ab21ebc2ff3d8676da4693577206b485bcd831fdd79676e953ff55bbd54abd21472d70fe1e60268f5ccd1d40dc56f14f4ce9ca4bfd0349aadf58c38612712414144811f1bcc185e4c877f3b909e32dd4f5522e8319fff1fb29bc2fa6be4940176aba35eb0e85c329e0df0619e564b602f8ceb4c2ba0b50000d03f0b2440518bbf8bccbc3aab95dcff461f6d31c38f5b2f46e301653970fe7b79d538512e305d52b80ff0a0b9b31e7891c5dced72c4295ed1347c42fbd3cbc4314709ae87844066490b29dbb2327abb286a0d7e34fec1069fbb876dd851225669c5007979887204141ec72ca44c9e5a88501422d90ac9b2cad3adf309b8e943ea328a999a5c128aa87fabaeb5c851b19285494869247b8dc2e86ed4ed0ccb27d19f6426b12652cf0ef45072b2763dedf138f069f9f362ec33cef5aaf39564d52a7755b7ba1171221a0119900d5e47bde7c9264c9b569ef8669a04dc12878abf518200b12df08f71ecda6a1eb26b4803655ea03ec45479097527e2208a6c660951cf9135dc278fef2f08f48aa38c0ef0a28ecc92dfde9f558f8ae25792bd76d970f8a8c05e2431d3e3b4504d42d326ad77f047b08561651cbc721374bc1a06ef54b65cb2f9772157dbeceae61f067ac571e27daa05555e5575cea2a365ff04c40";
            byte[] bytes = message.FromHexString();
            InvMessage? invMessage = NodeMessage.Deserialize(bytes) as InvMessage;
            Assert.IsNotNull(invMessage);
            Assert.AreEqual((byte)55, (byte)invMessage.MessageType);
            Assert.AreEqual(56, invMessage.Headers.Count);
            Assert.IsTrue(invMessage.Validate());
        }

        [TestMethod]
        public void CanDecodeRealInvMessage()
        {
            string message =
                "0200000237000000226d8a11230201666deff335b788868662d1cd7d88919b0803e2f7c47ca0602683bd5f78066dc402000002fac9d186ccd3b7e3f8010206c0a8f580bc46";
            byte[] bytes = message.FromHexString();
            InvMessage? invMessage = NodeMessage.Deserialize(bytes) as InvMessage;
            Assert.IsNotNull(invMessage);
            Assert.AreEqual((byte)55, (byte)invMessage.MessageType);
            Assert.AreEqual(1, invMessage.Headers.Count);
        }
    }
}
